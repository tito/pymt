#!/usr/bin/scons

import distutils.sysconfig
import os
from os import environ
from glob import glob
import re
import sys

def SWIGSharedLibrary(env, library, sources, **args):
    swigre = re.compile('(.*).i')
    if env.WhereIs('swig') is None:
        sourcesbis = []
        for source in sources:
            cName = swigre.sub(r'\1_wrap.c', source)
            cppName = swigre.sub(r'\1_wrap.cc', source)
            if os.path.exists(cName):
                sourcesbis.append(cName)
            elif os.path.exists(cppName):
                sourcesbis.append(cppName)
            else:
                sourcesbis.append(source)
    else:
        sourcesbis = sources

    flags = ['-python', '-c++']#, '-noh', '-dirvtable']
    if 'SWIGFLAGS' in args:
        args['SWIGFLAGS'] += flags
    else:
        args['SWIGFLAGS'] = flags + env['SWIGFLAGS']
    if 'SWIGFLAGS' in env:
        args['SWIGFLAGS'] += env['SWIGFLAGS']

    args['SHLIBPREFIX'] = ''
    if sys.version >= '2.5' and os.name == 'win32':
        args['SHLIBSUFFIX'] = '.pyd'

    cat = env.SharedLibrary(library, sourcesbis, **args)
    return cat

# Source files
sources = [os.path.join('src', 'pymtcore.i')]
sources += glob(os.path.join('src', '*.cpp'))

# Create environment and substitute all vars with env vars
env = Environment(CPPPATH=[distutils.sysconfig.get_python_inc()])
for key in [ 'CC', 'CCFLAGS', 'CXX', 'CXXFLAGS' ]:
    if environ.has_key(key):
        env.Replace( **{key: environ[key].split(' ')} )

# Append default flags for compilation
flags = ['-Wall', '-Wconversion', '-Wno-unused-parameter']
env.Append(CCFLAGS=flags, CXXFLAGS=flags)

# If debug is asked, add some vars
if 'DEBUG' in environ:
    flags = [ '-O0', '-ggdb' ]
    env.Append(LINKFLAGS=flags, CCFLAGS=flags, CXXFLAGS=flags)

# Dependices
lib_files = [
    # SDL
    # http://www.libsdl.org/
    'sdl'
]
for lib_file in lib_files:
    env.ParseConfig('pkg-config %s --cflags --libs' % lib_file)

# OpenGL
env.Append(LIBS=['GL', 'GLU', 'GLEW'])

# Optionnals
conf = Configure(env)
image_providers = []
text_providers = []
if not conf.CheckHeader('GL/glew.h'):
    print 'ERROR: GLew is missing (http://glew.sourceforge.net/)'
    sys.exit(-1)

if conf.CheckHeader('SDL_image.h'):
    image_providers.append('SDL_image')
    env.Append(LIBS=['SDL_image'])
    env.AppendUnique(CXXFLAGS='-DHAVE_SDL_IMAGE')

env.ParseConfig('pkg-config imlib2 --cflags --libs')
if conf.CheckHeader('Imlib2.h'):
    image_providers.append('imlib2')
    env.AppendUnique(CXXFLAGS='-DHAVE_IMLIB2')

env.ParseConfig('pkg-config cairo --cflags --libs')
if conf.CheckHeader('cairo.h'):
    text_providers.append('cairo')
    env.Append(CXXFLAGS='-DHAVE_CAIRO')

# Create the library.
env['BUILDERS']['PythonModule'] = SWIGSharedLibrary
env.PythonModule(os.path.join('src', '_pymtcore'), sources)

if len(image_providers) == 0:
    print 'ERROR: you must have at least one image provider'
    sys.exit(-1)

if len(text_providers) == 0:
    print 'ERROR: you must have at least one text provider'
    sys.exit(-1)

print
print 'PyMT Core Configuration'
print
print '  Image providers: ', ', '.join(image_providers)
print '  Text providers:  ', ', '.join(text_providers)
print
