#!/usr/bin/scons
# vim: set syntax=python:

import distutils.sysconfig
import os
from os import environ
from glob import glob
import re
import sys

def SWIGSharedLibrary(env, library, sources, **args):
    swigre = re.compile('(.*).i')
    if env.WhereIs('swig') is None:
        sourcesbis = []
        for source in sources:
            cName = swigre.sub(r'\1_wrap.c', source)
            cppName = swigre.sub(r'\1_wrap.cc', source)
            if os.path.exists(cName):
                sourcesbis.append(cName)
            elif os.path.exists(cppName):
                sourcesbis.append(cppName)
            else:
                sourcesbis.append(source)
    else:
        sourcesbis = sources

    flags = ['-python', '-c++']#, '-noh', '-dirvtable']
    if 'SWIGFLAGS' in args:
        args['SWIGFLAGS'] += flags
    else:
        args['SWIGFLAGS'] = flags + env['SWIGFLAGS']
    if 'SWIGFLAGS' in env:
        args['SWIGFLAGS'] += env['SWIGFLAGS']

    args['SHLIBPREFIX'] = ''
    if sys.version >= '2.5' and os.name == 'win32':
        args['SHLIBSUFFIX'] = '.pyd'

    cat = env.SharedLibrary(library, sourcesbis, **args)
    return cat


#------------------------------------------------------------------------------
# Source files
#------------------------------------------------------------------------------
#
sources = [os.path.join('src', 'pymtcore.i')]
sources += glob(os.path.join('src', '*.cpp'))

#------------------------------------------------------------------------------
# Environment
#------------------------------------------------------------------------------

# Create environment and substitute all vars with env vars
env = Environment(CPPPATH=[distutils.sysconfig.get_python_inc()])
for key in [ 'CC', 'CCFLAGS', 'CXX', 'CXXFLAGS' ]:
    if environ.has_key(key):
        env.Replace( **{key: environ[key].split(' ')} )

# Append default flags for compilation
flags = ['-Wall', '-Wconversion', '-Wno-unused-parameter']
env.Append(CCFLAGS=flags, CXXFLAGS=flags)

# Enable debug mode
if 'DEBUG' in environ:
    flags = ('-O0', '-ggdb')
    env.Append(LINKFLAGS=flags, CCFLAGS=flags, CXXFLAGS=flags)


#------------------------------------------------------------------------------
# Libraries
#------------------------------------------------------------------------------

libraries_available = {
    'gl': False,
    'glu': False,
    'glew': False,
    'sdl': False,
    'sdl_image': False,
    'imlib2' : False,
    'cairo' : False,
}
providers_image = []
providers_text = []

conf = Configure(env)

# SDL
try:
    env.ParseConfig('pkg-config sdl --cflags --libs')
    libraries_available['sdl'] = True
except:
    if conf.CheckHeader('SDL/SDL.h'):
        libraries_available['sdl'] = True
        env.Append(LIBS=['SDL'])

# SDL_image
if conf.CheckHeader('SDL_image.h'):
    libraries_available['sdl_image'] = True
    providers_image.append('SDL_image')
    env.Append(LIBS=['SDL_image'])
    env.AppendUnique(CXXFLAGS='-DHAVE_SDL_IMAGE')

# Imlib2
env.ParseConfig('pkg-config imlib2 --cflags --libs')
if conf.CheckHeader('Imlib2.h'):
    libraries_available['imlib2'] = True
    providers_image.append('imlib2')
    env.AppendUnique(CXXFLAGS='-DHAVE_IMLIB2')

# Cairo
env.ParseConfig('pkg-config cairo --cflags --libs')
if conf.CheckHeader('cairo.h'):
    libraries_available['cairo'] = True
    providers_text.append('cairo')
    env.Append(CXXFLAGS='-DHAVE_CAIRO')

# OpenGL
if conf.CheckHeader('GL/gl.h'):
    env.Append(LIBS=['GL'])
    libraries_available['gl'] = True

# GLU
if conf.CheckHeader('GL/glu.h'):
    env.Append(LIBS=['GLU'])
    libraries_available['glu'] = True

# GLU
if conf.CheckHeader('GL/glew.h'):
    env.Append(LIBS=['GLEW'])
    libraries_available['glew'] = True

# Create the library.
env['BUILDERS']['PythonModule'] = SWIGSharedLibrary
env.PythonModule(os.path.join('src', '_pymtcore'), sources)

print
print '+-------------------------------------------------------+'
print
print '  PyMT Core Configuration'
print
print '  Configuration'
print '    Debug mode.................. : %s ' % str('DEBUG' in environ)
print
print '  Libraries (i = Image provider, t = Text provider)'
print '    OpenGL...................... : %s ' % str(libraries_available['gl'])
print '    OpenGL.GLU.................. : %s ' % str(libraries_available['glu'])
print '    OpenGL.GLEW................. : %s ' % str(libraries_available['glew'])
print '    SDL......................... : %s ' % str(libraries_available['sdl'])
print '    SDL_Image (optionnal)......i : %s ' % str(libraries_available['sdl_image'])
print '    Imlib2.....................i : %s ' % str(libraries_available['imlib2'])
print '    Cairo......................t : %s ' % str(libraries_available['cairo'])
print
print '+-------------------------------------------------------+'
print

if len(providers_image) == 0:
    print 'ERROR: you must have at least one image provider (i)'
    sys.exit(-1)

if len(providers_text) == 0:
    print 'ERROR: you must have at least one text provider (t)'
    sys.exit(-1)

sys.exit(-1)
